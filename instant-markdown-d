#!/usr/bin/env node

var marked = require('marked');
var hljs = require('highlight.js');
var server = require('http').createServer(httpHandler),
    exec = require('child_process').exec,
    io = require('socket.io').listen(server),
    os = require('os'),
    send = require('send'),
    server,
    socket;

marked.setOptions({
  highlight: function(code, lang) {
    return hljs.highlight(lang, code).value;
  }
});

server.listen(8090);

function writeMarkdown(input, output) {
  var body = '';
  input.on('data', function(data) {
    body += data;
    if (body.length > 1e6) {
      throw new Error('The request body is too long.');
    }
  });
  input.on('end', function() {
    marked(body, function(err, content) {
      if (err) { throw err; }
      output.emit('newContent', content);
    });
  });
}

function httpHandler(req, res) {
  switch(req.method)
  {
    case 'GET':
      // Example: /my-repo/raw/master/sub-dir/some.png
      var githubUrl = req.url.match(/\/[^\/]+\/raw\/[^\/]+\/(.+)/);
      if (githubUrl) {
         // Serve the file out of the current working directory
        send(req, githubUrl[1])
         .root(process.cwd())
         .pipe(res);
        return;
      }

      // Otherwise serve the file from the directory this module is in
      send(req, req.url)
        .root(__dirname)
        .pipe(res);
      break;

    // case 'HEAD':
      // res.writeHead(200);
      // res.end();
      // exec('open -g http://localhost:8090', function(error, stdout, stderr){
        // http.request({port: 8090})
      // });
      // break;

    case 'DELETE':
      socket.emit('die');
      process.exit();
      break;

    case 'PUT':
      writeMarkdown(req, socket);
      res.writeHead(200);
      res.end();
      break;

    default:
  }
}

io.sockets.on('connection', function(sock){
  socket = sock;
  process.stdout.write('connection established!');
  writeMarkdown(process.stdin, socket);
  process.stdin.resume();
});

if (os.platform() === 'win32') {
  exec('start /b http://localhost:8090', function(error, stdout, stderr){});
} else if (os.platform() === 'darwin') {
  exec('open -g http://localhost:8090', function(error, stdout, stderr){});
} else { // assume unix/linux
  exec('xdg-open http://localhost:8090', function(error, stdout, stderr){});
}
